# ----------------------------------------------------------------------------
# GitHub Actions workflow to build this application.
# Using latest Castle Game Engine ( https://castle-engine.io/ ) snapshot.
# For multiple platforms.
# In this case: also for Raspberry Pi using https://github.com/marketplace/actions/arm-runner .
#
# This uses GitHub-hosted runners, that is: you don't need to set up any server
# infrastructure, GitHub provides it all for free for open-source projects.
#
# See docs:
# - https://castle-engine.io/github_actions
# - https://docs.github.com/en/actions
# ----------------------------------------------------------------------------

name: Build

on:
  pull_request:
  push:
    branches:
      - '**'

jobs:
  # Build for Windows and Linux.
  build-using-docker:
    name: Build Using Docker
    runs-on: ubuntu-latest
    container: kambi/castle-engine-cloud-builds-tools:cge-unstable
    steps:
      - uses: actions/checkout@v4

      - name: Package Windows
        run: |
          cd test_project_for_rpi/
          castle-engine package --os=win64 --cpu=x86_64 --verbose
      - name: Archive Artifacts
        # See https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          # Note: Keep paths that start with asterisk in double qoutes, to avoid misinterpreting as YAML reference.
          # See https://stackoverflow.com/questions/19109912/yaml-do-i-need-quotes-for-strings-in-yaml
          # https://yamlchecker.com/
          path: "test_project_for_rpi/*-win64-x86_64.zip"
          if-no-files-found: error

      - name: Package Linux
        run:  |
          cd test_project_for_rpi/
          castle-engine package --os=linux --cpu=x86_64 --verbose
      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: "test_project_for_rpi/*-linux-x86_64.tar.gz"
          if-no-files-found: error

  # Build for Raspberry Pi using https://github.com/marketplace/actions/arm-runner .
  build-rpi:
    name: Build for Raspberry Pi (Linux/Arm)
    runs-on: ubuntu-latest
    # matrix to build on various Raspberry Pi models from https://github.com/marketplace/actions/arm-runner
    # TODO: Do we need both armv6l, armv7l?
    # We really want the one for Raspberry Pi 4 and 5, 32-bits.
    strategy:
      matrix:
        arch: [armv6l, armv7l, aarch64]
        include:
        - arch: armv6l
          cpu: arm1176
          base_image: raspios_lite:latest
          cpu_info: cpuinfo/raspberrypi_zero_w
        - arch: armv7l
          cpu: cortex-a7
          base_image: raspios_lite:latest
          cpu_info: cpuinfo/raspberrypi_3b
        - arch: aarch64
          cpu: cortex-a53
          base_image: raspios_lite_arm64:latest
          cpu_info: cpuinfo/raspberrypi_zero2_w_arm64_w
    steps:
      - uses: actions/checkout@v4
      - uses: pguyot/arm-runner-action@v2
        with:
          base_image: ${{ matrix.base_image }}
          cpu: ${{ matrix.cpu }}

          # Hm, I could not get this to work.
          #
          # - With cpuinfo/ prefix:
          #   ( as examples on
          #   https://github.com/pguyot/wm8960/blob/master/.github/workflows/arm-runner.yml
          #   https://github.com/nabaztag2018/pynab/blob/master/.github/workflows/arm-runner.yml
          #   )
          #
          #   mount: /home/actions/temp/arm-runner/mnt/proc/cpuinfo: special device /home/runner/work/_actions/pguyot/arm-runner-action/v2/cpuinfo/raspberrypi_zero2_w_arm64_w does not exist.
          #   Error: Process completed with exit code 32.
          #   Run sudo umount /home/actions/temp/arm-runner/mnt/proc/cpuinfo
          #   umount: /home/actions/temp/arm-runner/mnt/proc/cpuinfo: not mounted.
          #   Error: Process completed with exit code 32.
          #
          #   https://github.com/michaliskambi/test-arm-runner-for-cge/actions/runs/11618086632/job/32354717610
          #
          # - Without cpuinfo/ prefix:
          #   ( as example at the bottom of https://github.com/pguyot/arm-runner-action?tab=readme-ov-file )
          #
          #   Run if [ -e /home/runner/work/test-arm-runner-for-cge/test-arm-runner-for-cge/raspberrypi_zero2_w_arm64_w ]; then
          #   mount: /home/actions/temp/arm-runner/mnt/proc/cpuinfo: special device /home/runner/work/_actions/pguyot/arm-runner-action/v2/raspberrypi_zero2_w_arm64_w does not exist.
          #   Error: Process completed with exit code 32.
          #   Run sudo umount /home/actions/temp/arm-runner/mnt/proc/cpuinfo
          #   umount: /home/actions/temp/arm-runner/mnt/proc/cpuinfo: not mounted.
          #   Error: Process completed with exit code 32.
          #
          #   https://github.com/michaliskambi/test-arm-runner-for-cge/actions/runs/11616247104/job/32348736420
          #
          # However, https://github.com/pguyot/arm-runner-action?tab=readme-ov-file
          # says it's not necessary:
          # qemu 8.2 and higher do intercept /proc/cpuinfo to report something related to the passed cpu option. So if you are running ubuntu-24.04 or if you install your own version of qemu-user-arm/aarch64, this option will be effectless.
          #cpu_info: ${{ matrix.cpu_info }}

          shell: /bin/bash -eo pipefail
          image_additional_mb: 4000
          commands: |
            # useful string to grep logs, because log of script execution is somewhat buried in the middle of pguyot/arm-runner-action log
            echo 'CGE script starts here'

            # show system info
            uname -a
            lsb_release -a

            # # install prerequisites
            sudo apt-get update
            sudo apt-get --no-install-recommends -y install libgl-dev fpc git git-lfs

            # get and build Castle Game Engine
            export CASTLE_ENGINE_PATH=`pwd`/castle-engine
            export PATH=$PATH:$CASTLE_ENGINE_PATH/tools/build-tool/
            git clone --depth 1 --single-branch --branch snapshot https://github.com/castle-engine/castle-engine/
            cd castle-engine/
            ./tools/build-tool/castle-engine_compile.sh
            cd ../

            # build the project
            cd test_project_for_rpi/
            castle-engine package
          copy_artifact_path: "test_project_for_rpi/*.tar.gz"

      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: raspberry-pi-${{ matrix.arch }}-build
          path: "*-tar.gz"
          if-no-files-found: error

  release:
    name: Release
    runs-on: ubuntu-latest
    # Only upload release if all builds, on all runners, succeeded.
    needs: [build-using-docker, build-rpi]
    steps:
    - name: Download packaged releases
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - name: List downloaded files
      run: ls -R
    - name: GH CLI status
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh auth status
    # Releases files in the "snapshot" release.
    - name: Release Artifacts
      if: ${{ github.ref == 'refs/heads/master' }}
      run: gh release --repo ${{ github.repository }} upload snapshot --clobber *.zip *.tar.gz
      env:
        GH_TOKEN: ${{ github.token }}

  update-release-tag:
    name: Update Release Tag (make snapshot tag point to the build commit on master branch)
    runs-on: ubuntu-latest
    needs: [release]
    steps:
    - uses: actions/checkout@v4
    - name: Update Release Tag
      if: ${{ github.ref == 'refs/heads/master' }}
      run: |
        # --force allows to overwrite previous tag
        git tag --force snapshot
        # --force allows to push with overwritten tag
        git push --force origin snapshot
