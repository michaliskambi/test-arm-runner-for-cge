# ----------------------------------------------------------------------------
# GitHub Actions workflow to build this application.
# Using latest Castle Game Engine ( https://castle-engine.io/ ) snapshot.
# For multiple platforms.
# In this case: also for Raspberry Pi using https://github.com/marketplace/actions/arm-runner .
#
# This uses GitHub-hosted runners, that is: you don't need to set up any server
# infrastructure, GitHub provides it all for free for open-source projects.
#
# See docs:
# - https://castle-engine.io/github_actions
# - https://docs.github.com/en/actions
# ----------------------------------------------------------------------------

name: Build

on:
  pull_request:
  push:
    branches:
      - '**'

jobs:
  # # Build for Windows and Linux.
  # build-using-docker:
  #   name: Build Using Docker
  #   runs-on: ubuntu-latest
  #   container: kambi/castle-engine-cloud-builds-tools:cge-unstable
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Package Windows
  #       run: |
  #         cd test_project_for_rpi/
  #         castle-engine package --os=win64 --cpu=x86_64 --verbose
  #     - name: Archive Artifacts
  #       # See https://github.com/actions/upload-artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: windows-build
  #         # Note: Keep paths that start with asterisk in double qoutes, to avoid misinterpreting as YAML reference.
  #         # See https://stackoverflow.com/questions/19109912/yaml-do-i-need-quotes-for-strings-in-yaml
  #         # https://yamlchecker.com/
  #         path: "test_project_for_rpi/*-win64-x86_64.zip"
  #         if-no-files-found: error

  #     - name: Package Linux
  #       run:  |
  #         cd test_project_for_rpi/
  #         castle-engine package --os=linux --cpu=x86_64 --verbose
  #     - name: Archive Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: linux-build
  #         path: "test_project_for_rpi/*-linux-x86_64.tar.gz"
  #         if-no-files-found: error

  # Build for Raspberry Pi 32-bit.
  # TODO: test 64-bit too, following matrix on https://github.com/marketplace/actions/arm-runner

  build-rpi32-minimal:
    name: Build for Raspberry Pi 32-bit minimal
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pguyot/arm-runner-action@v2
        with:
          shell: /bin/bash
          commands: |
            echo "Minimal"
            test `uname -m` = 'armv6l'
          #copy_artifact_path: "test_project_for_rpi/*.tar.gz"

  build-rpi32:
    name: Build for Raspberry Pi 32-bit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pguyot/arm-runner-action@v2
        with:
          shell: /bin/bash -eo pipefail
          commands: |
            # show system info
            uname -a
            lsb_release -a

            # install prerequisites
            sudo apt update
            sudo apt-get --no-install-recommends -y install libgl-dev fpc

            # get and build Castle Game Engine
            export CASTLE_ENGINE_PATH=`pwd`/castle-engine
            export PATH=$PATH:$CASTLE_ENGINE_PATH/tools/build-tool/
            git clone --depth 1 --single-branch --branch snapshot https://github.com/castle-engine/castle-engine/
            ./tools/build-tool/castle-engine_compile.sh

            # build the project
            cd test_project_for_rpi/
            castle-engine package
          #copy_artifact_path: "test_project_for_rpi/*.tar.gz"

  #     - name: Archive Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: raspberry-pi-32-build
  #         path: "*-tar.gz"
  #         if-no-files-found: error

  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   # Only upload release if all builds, on all runners, succeeded.
  #   needs: [build-using-docker, build-rpi32]
  #   steps:
  #   - name: Download packaged releases
  #     uses: actions/download-artifact@v4
  #     with:
  #       merge-multiple: true
  #   - name: List downloaded files
  #     run: ls -R
  #   - name: GH CLI status
  #     env:
  #       GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     run: gh auth status
  #   # Releases files in the "snapshot" release.
  #   - name: Release Artifacts
  #     if: ${{ github.ref == 'refs/heads/master' }}
  #     run: gh release --repo ${{ github.repository }} upload snapshot --clobber *.zip *.tar.gz
  #     env:
  #       GH_TOKEN: ${{ github.token }}

  # update-release-tag:
  #   name: Update Release Tag (make snapshot tag point to the build commit on master branch)
  #   runs-on: ubuntu-latest
  #   needs: [release]
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Update Release Tag
  #     if: ${{ github.ref == 'refs/heads/master' }}
  #     run: |
  #       # --force allows to overwrite previous tag
  #       git tag --force snapshot
  #       # --force allows to push with overwritten tag
  #       git push --force origin snapshot
